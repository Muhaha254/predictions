from flask import Flask, render_template, request, flash

app = Flask(__name__)
app.secret_key="muhaha254"


@app.route("/")
def index():
	return render_template("index.html")

@app.route("/data", methods=["POST", "GET"])
def save_data1():
	start_date = request.form['test']
	end_date = request.form['test2']

	# -*- coding: utf-8 -*-
"""Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZdtS_iLn8-aZBqYAopjDJamgGcThiGPS"""

#import libraries
import math
import yfinance as yf
import pandas_datareader as web
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')

#In the case that you run across an errors run the following
#!pip install yfinance
#!pip install --upgrade pandas
#!pip install --upgrade pandas-datareader

#Get the stock quote

df = web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2021-12-17')
#Show the data
#df

#Get numer of rows and columns in the dataset
#df.shape

#Visualizing the closing dates
#plt.figure(figsize=(16,8))
#plt.title('Closing Prices')
#plt.plot(df['Close'])
#plt.xlabel('Date', fontsize= 18 )
#plt.ylabel('Close Price USD$', fontsize= 18 )

#Creating a new data frame with only the close column
data= df.filter(['Close'])
#convert the dataframe to a numpy array
dataset= data.values
# Get number of rows tp train the LSTM model
#training the model with 80% of the dataset and rounding it off
training_data_len = math.ceil(len(dataset) * 0.80)


#training_data_len

#Scale the data
scaler= MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(dataset)

#scaled_data

#Create the training data set
#Create the scaled training data set

train_data= scaled_data[0: training_data_len, :]
#Split the data into x_train and y_train datasets
x_train = []
y_train = []

for i in range(60, len(train_data)):
  x_train.append(train_data[i-60: i, 0])
  y_train.append(train_data[i, 0])
  if i<= 61:
    print(x_train)
    print(y_train)
    print()

#Convert x_train and y_train to numpy arrays
x_train= np.array(x_train) 
y_train= np.array(y_train)

#Reshape the data
x_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1 ))
x_train.shape

#Building The LSTM Model.    
model = Sequential()
model.add(LSTM(50, return_sequences=True, input_shape = (x_train.shape[1], 1)))
model.add(LSTM(50, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))

#comple the model
model.compile(optimizer='adam', loss='mean_squared_error')
 #The optimizer improves on the loss function where as the loss function is used to measure how well the mdel did on training

#Train the model
model.fit(x_train, y_train, batch_size=1, epochs=1)

#Create the testing data set
#Create a new array containing scaled values from index 1543 to 2504
test_data =scaled_data[training_data_len - 60: , : ]
#Create the data sets x_tests % y_tests
x_test = []
y_test = dataset[training_data_len: ,: ]
for i in range(60, len(test_data)):
  x_test.append(test_data[i-60: i, 0])

#Convert the data to a numpy array
x_test = np.array(x_test)

#Reshape the data
x_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))

#models predicted price values
predictions = model.predict(x_test)
predictions = scaler.inverse_transform(predictions)

# Get the root mean square error (RMSE)
rmse = np.sqrt(np.mean( predictions - y_test)**2)
rmse

#Plot the data
train = data[0: training_data_len]
valid = data[training_data_len:]
valid['Predictions']= predictions
#Visualize the data
#plt.figure(figsize=(16,8))
#plt.title('Model')
#plt.xlabel('Date', fontsize=18)
#plt.ylabel('Close price USD ($)', fontsize=10)
#plt.plot(train['Close'])
#plt.plot(valid[['Close','Predictions']])
#plt.legend(['Train','Val','Predictions'], loc='lower right')
#plt.show()

#Show actual closing prices
v#alid

#Get the quote
apple_quote =web.DataReader('AAPL', data_source='yahoo', start='2012-01-01', end='2021-12-17')
#create new data frame
new_df= apple_quote.filter(['Close'])
#Get the last 60 day closing price values and convert the dataframe to an array
last_60_days= new_df[-60:].values
#scale data to be values btn 0 & 1
last_60_days_scaled = scaler.transform(last_60_days)
#Create emty list
X_test=[]
#Append the past 60 days to 
X_test.append(last_60_days_scaled) 
#Convert  the x_test to a numpy array
X_test = np.array(X_test)
#reshape data to 3 dimensions
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))
#Get predicted scaled price
pred_price= model.predict(X_test)
#undo scaling
pred_price =  scaler.inverse_transform(pred_price)
print(pred_price)

apple_quote2 =web.DataReader('AAPL', data_source='yahoo', start=start_date, end=end_date)
print(apple_quote2['Close'])
	return render_template("index.html")